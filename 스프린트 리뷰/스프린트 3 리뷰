# 스프린트 3 리뷰

# 스프린트 3 리뷰

# KPT

![image.png](attachment:6fdff8d4-f4e6-45d7-ae29-323831f087e6:image.png)

## **😎 Keep 😎**

### 김승규

- 스크럼 때 화면 공유해서 보여주는 게 아주 좋습니다. 서로 하는 업무도 잘 알고 미쳐 놓친 부분도 서로 방지해줄 수 있어서 도움이 됐어요. 👍
- 스크럼 때 생긴 문제에 대한 공유가 잘 이루어졌습니다. 그리고 그에 대한 이슈도 생성되고 관리되었습니다. 👍
- 공유할 거 생기면 슬랙으로 실시간 공유하기로 했는데 잘 된 거 같아요. 근데 스레드는 좀 더 활용하면 좋겠습니다. 👍 🙇‍♂️
- 스크럼 빠지는 날이 없어서 좋았습니다! 👍 ⏰
- 슬랙에서 이슈 상태 변경 메시지가 계속 올라왔습니다. 저는 크게 바꾼 게 없어서 아쉬웠습니다.
- 백엔드와 유기적인 협력이 되었습니다. 프로젝트 구성이 바뀌는 경우가 많아서 계속 회의하며 수시로 병합을 하였습니다. 👍
- AWS 요금을 많이 줄였습니다.

### 신동원

- 결정이 필요할 때 빠르게 회의 열어서 공유하는게 좋았어요 😇 👍
- 스크럼 때 작업 공유가 스프린트2보다 잘된 것 같아요 😇
- 이슈 상태 변경을 슬랙에서 공유해서 어떤 작업 중인지 알기 쉬웠어요 😇
- 스레드를 통한 대화가 많이 활성화된거 같아요 💬
- 명세서를 통한 공유가 이루어지는게 좋아요  😇🙏
- 안드로이드 mocking + 테스트 코드 적용해서 서버 없이도 개발이 원활했어요

### 이동권

- 다같이 진행되고 있는 상황이 보여서 좋았어요 🔥🔥
- 동원씨랑 밤에 피그마로 간단한 수정 대화하면서 개발하는게 좋았어요 🔥
- 달리기를 시작해서 약간 더 건강해져서 개발에 오래 집중할 수 있어서 좋았어요 💪 👍
- 윤섭님이 pr리뷰할때 공부할 점을 잘 집어주셔서 좋아요
- 스크럼때 어떤걸 하고있는지 더 자세히 설명해주셔서 좋아요 🔥 ⭐

### 이주현

- **이슈관리를 통해서 서로 뭘 하는지 더 쉽게 확인할 수 있어서 좋아요** 🔥🔥🥳
- 이제는 api 개발이 진행되면서 서로 어떤 api/화면이 나왔는지 실시간으로 물어보는게 좋았어요
- 명세서를 통한 공유가 이루어지는게 좋아요
- 쓰레드 채팅으로 서로 필요한 이야기가 잘 이어져서 좋아요 🔥
- 팀원들 모두가 각자 프로젝트에 관성이 생긴것 같아서 좋아요
- 일정관리가 저번 스프린트보다 훨씬 잘 되는것 같아요. 🔥🔥 🥳

### 정리

- 업무 공유가 잘 되었습니다.
    - 스크럼 때 상황 공유
    - 슬랙으로 실시간 공유
- 이슈 관리가 잘 되었습니다.
    - 이슈 세분화가 잘 되었다.
    - 플래닝 통해서 이슈 설계한 게 도움이 된 것 같다.
- 명세를 통한 공유가 잘 되었습니다.
    - 개발 후 API 명세 등록
- 전체적으로 저번 스프린트보다 개선되었습니다! ⭐⭐⭐⭐⭐ 👍

## ⚠️ **Problem** ⚠️

### 김승규

- 운동 기록 생성 API에 대한 이슈가 예상외로 너무 너무 너무 커졌습니다. 😵‍💫 (13점 → 스프린트 내내 했는데 못끝냄..) 💀
    - 로컬 환경(LocalStack), 테스트 환경(TestContainers 와 LocalStack), 실제 환경(API Gateway → 이미지 전송 오류 이슈), CQRS(command/query 구분), API 명세(Spring REST Docs 3), SRP(API 설계 변경) 등등을 고려하다보니 프로젝트 전반을 수정하는 이슈가 되었습니다.
    - 플래닝 포커가 잘못되었다고 볼 수 있죠.. 체감상 30포인트가 넘는 이슈였습니다.
    - 주현이한테 업무 쏠림
- 저번 스프린트보단 적지만 일부 이슈가 미완료 되었습니다. 🥲
- 백엔드 입장에선 배포된 앱이나 웹을 볼 수 없어서 아쉽습니다. 🥲 🥲
- 오픽 시험 공부할 시간이 없습니다.. 플래닝할 땐 여유있게 하려고 했는데 안됐습니다.  😓
- API 명세를 너무 백엔드에게만 맡기는 느낌이 있었습니다. 제안 정도는 먼저 해주셔도 좋지 않을까 싶습니다. 🥲
- TDD를 적용하여 API 개발 전에 명세가 나오면 좋을 거 같습니다.
- 백엔드끼리 컨벤션이 달라 충돌이 많이 났습니다. 컨트롤러 정도는 같이 짜고 나눠도 좋을 거 같습니다. 😔
- API 명세서에 정보가 부족했습니다.
    - path variable에 대한 정보가 실수로 빠졌습니다.
    - 백엔드에서 검증한 부분에 대한 내용도 명세서에 적혀있으면 좋을 것 같습니다. 😵‍💫
- API 명세서가 너무 복잡합니다. 작성할 때 좀 더 가독성을 신경써야겠습니다. 🙁
- 프론트 인증이 미뤄지고 있습니다. 각 이슈의 우선순위에 대한 고려도 필요해 보입니다.🥲

### 신동원

- 안드 이슈를 ui 구현, api 연결을 하나의 이슈로 생성해서 서브이슈 필요한거 같아요
- 이슈 상태 변경을 슬랙에 올리는게 아직 미흡한거 같아요 🥲
- 브랜치 관리가 미흡해서 리뷰받는 동안 새 작업이 힘들었어요 🥲
    - 큰 작업 브랜치랑 세부 작업브랜치로 나눠서 해결했어요 🥳
- 플래닝포커로 할당한 점수랑 실제 걸린 시간이랑 일치하지 않는 점이 있었던 거 같아요 💀
    - 안드로이드 : 운동기록 생성,수정 5점 → 4일++
    - 프론트 : 로그인 (토큰관련) 3점 → 2.5일
    - 백엔드 : 수정 5점 → 갈아 엎어지면서 더 길어짐 / 생성 13점 → 이번 스프린트 내내 → 나머지를 주현이가
- api 명세서의 가독성이 조금 아쉬웠어요

### 이동권

- 이슈세분화는 잘 하였지만 개인적으로 못끝낸 이슈들이 조금 있어서 아쉬웠어요 🔥
- 한이슈를 다끝내지 못하고 다른이슈를 진행하면서 하다보니 두번째주는 이슈가 여러개 진행상황에 놓여있어서 다음플래닝회의땐 이슈를 더 신경써서 작성해야 할것 같아요 🥲
- 모킹을 해보지 못해서 api명세서가 완전히 나오지 않으면 api를 연결하는데 어려움이 있었어요. 모킹에 대해서 공부해봐야 할것같아요. 👍
- 이번 스프린트때는 밀린내용도 많아서 구직활동을 못했는데 다음스프린트부터는 구직활동하는 시간도 생각해서 일정관리를 해야할것같아요. 😅
- 브랜치관리가 미흡해서 리뷰받는 동안 새 작업이 힘들었어요

### 이주현

- 개발을 하기전에 컨벤션을 정하고 갔어야 하는데, 그런걸 안 정해서 중간중간 수정을 너무 많이 했던것 같아요 (개인) 🙏🙏
- 이슈에 걸리는 시간 측정이 아직도 어려워요 (외부 api 연동시)
- 일정관리가 생각보다 더 어려워요 (예상치 못한 문제들 발생) 🔥💀🔥🔥
- 평일에 최대한 하고 주말에 쉬는걸 목표로 잡았는데, 결국 주말에도 상당히 많은 시간을 소비했어요
- 문제가 생기면 AI에 많이 의지하는것 같아서 아쉬워요 (개인) ⚠️ ⚠️
- 테스트코드 작성을 해야 명세서가 나오는데, 테스트 코드 작성이 아직 어려워서 세세하게 못쓴 부분이 있는것 같아요 (개인)

### 정리

- API 명세서 가독성 개선
    - 백엔드: 검증한 내용 기입, 가독성 있게 작성, 중복 제거, 설명 구체화
    - 프론트: 솔직한 피드백(부족한 거, 과한 거), 검증 제대로 되었는지 교차 확인, 프로트 단에서 명확한 통합 테스트
- Mocking
    - 편한 방식으로 해보기
    - [https://velog.io/@_im_ssu/Postman-Mock-Server-만들기](https://velog.io/@_im_ssu/Postman-Mock-Server-%EB%A7%8C%EB%93%A4%EA%B8%B0) (이런거)
- 통합 부분 같이 개발하고 업무 나누기
    - 컨트롤러, 컨트롤러 테스트 코드 (API 명세)
- API 설계
    - 백엔드가 주도
    - 프론트가 먼저 작업하면 제안, 회의
    - 이미 해본 경험 있으면 공유(경험자의 가르침)
- 일정관리 (플래닝 포커)
    - 좀 더 공부해서.. 플래닝 포커할 때 좀 더 찾아보고 공부하면서 하자
    - 스토리를 여러 개 해서 그거로 플래닝

## **💪 Try 💪**

- 스크럼과 슬랙으로 업무 상세히 공유(오류나 공부한 내용도 포함)
- 이슈 세분화와 플래닝 포커 유지
- 일정 관리
    - 한 스프린트에 여러 유저 스토리를 지정해서 플래닝 포커할 때 스토리 단위로 포인트 측정
    - 이때, 심도 있게 공부하면서 최대한 논의
- API 명세서 가독성 개선
    - 백엔드: 검증한 내용 기입, 가독성 있게 작성, 중복 제거, 설명 구체화
    - 프론트: 솔직한 피드백(부족한 거, 과한 거), 검증 제대로 되었는지 교차 확인, 프론트 단에서 명확한 통합 테스트
- 프론트에서 Mocking 구축
    - 편한 방식으로 해보기
    - [https://velog.io/@_im_ssu/Postman-Mock-Server-만들기](https://velog.io/@_im_ssu/Postman-Mock-Server-%EB%A7%8C%EB%93%A4%EA%B8%B0) (이런거)
- 통합 부분 같이 개발하고 업무 나누기
    - 컨트롤러, 컨트롤러 테스트 코드 (API 명세)
- API 설계
    - 백엔드가 주도
        - (기획단) 개발 들어가면 API 명세를 먼저 뽑거나 아니면 스크럼과 슬랙으로 공유
        - (명세) API 명세서 올라가면 스크럼과 슬랙으로 공유
        - (개발 완료) 배포 완료 후 스크럼과 슬랙으로 공유
    - 프론트가 먼저 작업하면 제안, 회의
    - 이미 해본 경험 있으면 공유(경험자의 가르침)
- 배포 하기 (서비스, 개발)
